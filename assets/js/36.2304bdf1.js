(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{614:function(t,a,s){"use strict";s.r(a);var n=s(7),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("String")]),t._v(" "),s("p",[t._v("字符串字面量 (通过单引号或双引号定义) 和 直接调用 String 方法(没有通过 new 生成字符串对象实例)的字符串都是基本字符串\n基本数据类型保存在栈中，自动分配和释放")])]),t._v(" "),s("li",[s("p",[t._v("new String()")]),t._v(" "),s("p",[t._v("引用类型 引用指针保存在栈中，引用值保存在堆中，动态分配内存，需手动GC")])])]),t._v(" "),s("h3",{attrs:{id:"java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),s("ul",[s("li",[s("p",[t._v('new一次就是在堆中创建一个新的对象。不new的话aaa直接在字符串常量中取值;\nString s1 = "aaa"; 先在内存中寻找aaa，如果有，则将aaa的内存首地址指向了s1，\n如果没有则在堆中中创建一个新的对象。')])]),t._v(" "),s("li",[s("p",[t._v('String s1 = new String("aaa");\n不管"aaa"在内存中是否存在，都会在堆中开辟新空间，将字符串"aaa"的内存首地址指向s1。')])]),t._v(" "),s("li",[s("p",[t._v("String")]),t._v(" "),s("p",[t._v("存储在字符串常量池(string constant pool)中，如果相同变量值，则引用指针是相同的")])])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("String a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   aaa在常量池中创建一个对象，将内存首地址指向了a")]),t._v("\nString b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    直接aaa已经存在的内存首地址指向b。")]),t._v("\nString c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不管存在与否，在堆中创建1个空间，内存首地址与常量池中的地址完全不同")]),t._v("\nSystem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nSystem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://user-images.githubusercontent.com/22978699/131477128-3ef91484-909e-44f9-81ed-be19b89f0c10.png",alt:"image"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("new String")]),t._v(" "),s("p",[t._v("不管存在与否，在堆中创建1个空间，内存首地址与常量池中的地址完全不同\n"),s("img",{attrs:{src:"https://user-images.githubusercontent.com/22978699/131477180-d63b3b04-960c-41a5-9ccc-a100d3c7b7b5.png",alt:"image"}})])]),t._v(" "),s("li",[s("p",[t._v("StringBuffer")]),t._v(" "),s("p",[s("strong",[t._v("StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象\n在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer(  存在线程安全机制 ，即可同步访问 )")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);